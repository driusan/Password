package Password

import (
	"fmt"
	"testing"
)

func TestVerify(t *testing.T) {
	// Verify a password generated by PHP 5.5
	valid, err := Verify("abc",
		"$2y$10$F1dFlSql/EOwYKutm43po.0GVuGyrMvd0xbODsrXm6VpGA452BS0G")

	if valid == true && err != nil {
		t.Fail()
	}

	if valid != true {
		fmt.Println("Did not verify $2y algorithm from PHP Password API")
		t.Fail()
	}

	// Try verifying the hash against the wrong password and ensure that it's
	// false
	valid, err = Verify("abc2",
		"$2y$10$F1dFlSql/EOwYKutm43po.0GVuGyrMvd0xbODsrXm6VpGA452BS0G")
	if valid != false {
		fmt.Println("Did not fail to verify incorrect $2y algorithm from PHP Password API")
		t.Fail()
	}

	// Verify the same password, but generated from Go's x/crypto/bcrypt package
	// (Obviously, this also has a different salt..)
	valid, err = Verify("abc",
		"$2a$12$ePBBWcFdurTZzn0LeYPlhefo.RG9oMmdcVV.Z7XzHEbsUm3Viw036")
	if valid == true && err != nil {
		t.Fail()
	}

	if valid != true {
		fmt.Println("Did not verify $2a algorithm from crypto/bcrypt package")
		t.Fail()
	}

	// Try verifying the hash against the wrong password and ensure that it's
	// false
	valid, err = Verify("abc2",
		"$2a$12$ePBBWcFdurTZzn0LeYPlhefo.RG9oMmdcVV.Z7XzHEbsUm3Viw036")
	if valid != false {
		fmt.Println("Did not fail to verify incorrect $2a algorithm from crypto/bcrypt package")
		t.Fail()
	}

}
